#!/usr/bin/env python3
import argparse
import simulation.version


def run_subtool(parser, args):
    if args.command == 'simulate':
        import simulation.simulate as submodule
 
    submodule.run(parser, args)


if __name__ == "__main__":

    parser = argparse.ArgumentParser(prog='simulatION')
    parser.add_argument("-v", "--version", help="Installed simulatION version", action="version", version="%(prog)s " + str(simulation.version.__version__))
    subparsers = parser.add_subparsers(title='[sub-commands]', dest='command')

    parser_simulate = subparsers.add_parser(name='simulate',description="SimulatION simulation tool")
    parser_simulate.add_argument("-r", "--ref", required=True, help="Path to reference sequence file")
    parser_simulate.add_argument("-m", "--model", required=True, help="Path to pore model file")
    parser_simulate.add_argument("-c", "--config", required=True, help="Path to config file. Needs to be generated before using: configuration.py config <path_to_basecalled_reads>")
    parser_simulate.add_argument("-e", "--err", type=float, default=0.0, help="Error rate in decimal format (0.1 = 10%)")
    parser_simulate.add_argument("-t", "--threads", type=int, default=4, help="Number of threads to use for simulation")
    parser_simulate.add_argument("-n", "--reads", type=int, default=1000, help="Number of reads that should be simulated")
    parser_simulate.add_argument("-o", "--output", type=str, default='./', help="Path to where output files should be written to.")
    parser_simulate.add_argument("--ini", type=str, default='../../simulation.ini', help="Commit additional configuration values or overwrite individual values form config file")
    parser_simulate.set_defaults(func=run_subtool)

    args = parser.parse_args()
    try:
        args.func(parser, args)
    except AttributeError:
        parser.print_help()
